# This workflow uses actions that are not certified by GitHub.  They are
# provided by a third-party and are governed by separate terms of service,
# privacy policy, and support documentation.
#
# This workflow will install a prebuilt Ruby version, install dependencies, and
# run tests and linters.
name: Test-Build
on: [push]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Set up Flutter
        uses: subosito/flutter-action@v2.18.0
        id: flutter-action
        with:
          cache: true
          channel: stable
          architecture: x64
      - run: |
         git config --global --add safe.directory /opt/hostedtoolcache/flutter/${{ steps.flutter-action.outputs.CHANNEL }}-${{ steps.flutter-action.outputs.VERSION }}-${{ steps.flutter-action.outputs.ARCHITECTURE }}
         flutter --version 
      - run: flutter --version
      - name: Install dependencies
        run: flutter pub get
      - name: Update dependencies
        run: flutter pub upgrade
      - name: Run tests
        run: flutter test
      - name: Upload test logs
        if: failure()
        uses: actions/upload-artifact@v4.6.0
        with:
          name: test-logs
          path: log
      - name: Send Telegram Notification
        if: always()
        uses: cbrgm/telegram-github-action@v1.3.2
        with:
          token: ${{ secrets.TELEGRAM_TOKEN }}
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            Status: ${{ job.status }}
            Author: ${{ github.actor }}
            Workflow: ${{ github.workflow }}
            Commit: ${{ github.event.head_commit.message }}
            Changes: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}
  build:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Setup Java JDK
        uses: actions/setup-java@v4.4.0
        with:
          distribution: 'oracle'
          java-version: '21'
      - name: Update os packages
        run: |
            sudo apt-get update
      - uses: subosito/flutter-action@v2.18.0
        id: flutter-action
        with:
          cache: true
          channel: stable
      - run: |
          git config --global --add safe.directory /opt/hostedtoolcache/flutter/${{ steps.flutter-action.outputs.CHANNEL }}-${{ steps.flutter-action.outputs.VERSION }}-${{ steps.flutter-action.outputs.ARCHITECTURE }}
          flutter --version
      - name: Install flutter dependencies
        run: flutter pub get
      - name: Update flutter dependencies
        run: flutter pub upgrade
      - name: Build APK
        run: flutter build apk --split-per-abi
      - name: Archive APK
        uses: actions/upload-artifact@v4.6.0
        id: artifact-upload-step
        with:
          name: test-apk
          path: build/app/outputs/flutter-apk/*.apk
      - name: Download APK
        uses: actions/download-artifact@v4.1.8
        with:
          path: test-apk
          merge-multiple: true

        #10 Extract Version
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

        #11 Check if Tag Exists
      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.extract_version.outputs.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

        #12 Modify Tag if it Exists
      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${VERSION}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV
          echo "::set-output name=VERSION::$new_version"
        
        #13 Create Release
      - name: Create Release
        uses: ncipollo/release-action@v1.16.0
        with:
          artifacts: "build/app/outputs/flutter-apk/*.apk"
          token: ${{ secrets.GITHUB_TOKEN }}
          makeLatest: true
      - run: ls -R test-apk
      - name: Send Telegram Notification
        if: ${{ steps.artifact-upload-step.outputs.artifact-id }}
        uses: cbrgm/telegram-github-action@v1.3.2
        with:
          token: ${{ secrets.TELEGRAM_TOKEN }}
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            Author: ${{ github.actor }}
            DL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.artifact-upload-step.outputs.artifact-id }}